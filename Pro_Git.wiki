 = Pro_Git =
----
----
	1. [[#起步]]
		- [[#关于版本控制]]
		- [[#git简史]]
		- [[#git基础]]
		- [[#git安装]]
		- [[#初次运行git前配置]]
		- [[#获取帮助]]
	2. [[#Git基础]]
	3. [[#Git分支]]
	4. [[#服务器上的Git]]
	5. [[#分布式Git]]
	6. [[#Git工具]]
	7. [[#自定义Git]]
	8. [[#Git与其他系统]]
	9. [[#Git内部原理]]


=== 起步 ===
- *关于版本控制*
	- 本地版本控制系统：(rcs)

也就是本地备份。

	- 集中化版本控制系统CVCS：(CVS、Subversion、Perforce)

C/S形式，服务器保存所有文件的修订版本，客户端保存最新文件；服务器单点故障影响大，数据恢复风险大。

	- 分布式版本控制系统DVCS：(Git、Mercurial、Bazaar、Darcs)

C/S形式，客户端保存服务器代码仓库的完整镜像，所以网络依赖性较小，数据故障恢复容易。

- *git简史*

Linux内核维护 --> BitKeeper --> Git

- *git基础*

Git不关心文件前后变化的内容差异，只关心文件数据的整体是否发生变化。若变化，则保存文件快照；否则，链接上次文件快照。

Git大部分操作属于本地操作。

Git工作依赖于指纹字串，时刻保持数据的完整性。

常用的Git操作大多仅仅是把数据添加到数据库。

Git中文件的三种状态：1.已提交(本地仓库) 2.已暂存(暂存区) 3.已修改(工作目录)(包括已追踪文件和新建文件)

- *git安装*

Nothing to say.

- *初次运行git前配置*
	- 配置命令：git config
	- 配置文件：(就近原则)
		- 全局配置文件：/etc/gitconfig
		- 用户配置文件：~/.gitconfig
		- 当前项目配置文件：.git/config
	- 配置项：
		- 用户信息
{{{
	用户名：
	git config --global user.name "John Doe"
	邮箱：
	git config --global user.email johndoe@example.com
}}}
		- 文本编辑器
{{{
	git config --global core.editor vim
}}}
		- 差异分析工具
{{{
	git config --global merge.tool vimdiff
}}}
	- 查看配置：
{{{
	git config --list
	git config user.name
}}}

- *获取帮助*
{{{
	git help <verb>
	git <verb> --help
	man git-<verb>
}}}

=== Git基础 ===
